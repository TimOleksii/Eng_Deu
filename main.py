# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ streamlit –∫–æ–º–∞–Ω–¥–æ–π:
# pip install streamlit

try:
    import streamlit as st
    import pandas as pd
    import random
    import datetime
    import pyperclip
except ModuleNotFoundError as e:
    print("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", e)
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install streamlit")
    exit(1)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
LANGUAGES = ["–ù–µ–º–µ—Ü–∫–∏–µ —Å–ª–æ–≤–∞", "–ù–µ–º–µ—Ü–∫–∏–µ —Ñ—Ä–∞–∑—ã", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã"]
FILES = {
    "–ù–µ–º–µ—Ü–∫–∏–µ —Å–ª–æ–≤–∞": "german_words.xlsx",
    "–ù–µ–º–µ—Ü–∫–∏–µ —Ñ—Ä–∞–∑—ã": "german_phrases.xlsx",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞": "english_words.xlsx",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ñ—Ä–∞–∑—ã": "english_phrases.xlsx"
}

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ===
def load_data(category):
    file_path = FILES[category]
    try:
        return pd.read_excel(file_path)
    except FileNotFoundError:
        df = pd.DataFrame(columns=["Word", "Translation", "Level", "Last_Review"])
        df.to_excel(file_path, index=False)
        return df

def save_data(category, df):
    df.to_excel(FILES[category], index=False)

# === –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–≤ ===
def is_due(last_review, level):
    if pd.isna(last_review) or level == 0:
        return True
    days_passed = (datetime.datetime.now() - pd.to_datetime(last_review)).days
    if level == 5:
        return days_passed >= 60
    return days_passed >= 2 ** level

def get_due_words(df):
    df_due = df[df.apply(lambda row: is_due(row["Last_Review"], row["Level"]), axis=1)]
    if df_due.empty:
        return None
    max_level = df_due["Level"].max()
    return df_due[df_due["Level"] == max_level]

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ===
st.set_page_config(page_title="–Ø–∑—ã–∫–æ–≤–æ–π –¢—Ä–µ–Ω–∞–∂–µ—Ä", layout="centered")
st.title("üß† –¢—Ä–µ–Ω–∞–∂—ë—Ä –Ω–µ–º–µ—Ü–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤/—Ñ—Ä–∞–∑")

category = st.radio("–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ / —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", LANGUAGES, index=2, horizontal=True)
df = load_data(category)

menu = st.sidebar.radio("–ú–µ–Ω—é", ["–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤–∞—Ä—è"])

if menu == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ":
    st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã")
    word = st.text_input("–°–ª–æ–≤–æ / —Ñ—Ä–∞–∑–∞")
    translation = st.text_input("–ü–µ—Ä–µ–≤–æ–¥ (–Ω–∞ —Ä—É—Å—Å–∫–∏–π)")
    if st.button("–î–æ–±–∞–≤–∏—Ç—å") and word and translation:
        new_row = {
            "Word": word.strip(),
            "Translation": translation.strip(),
            "Level": 0,
            "Last_Review": pd.NaT
        }
        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
        save_data(category, df)
        st.success("–°–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

elif menu == "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞":
    st.subheader("üîÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
    due_words = get_due_words(df)

    if due_words is None or due_words.empty:
        st.info("–ù–µ—Ç —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏.")
    else:
        word_row = due_words.sample(1).iloc[0]
        st.markdown(f"**{word_row['Word']}**")

        if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"):
            pyperclip.copy(f"{word_row['Word']} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
            st.success("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")

        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥"):
            st.markdown(f"_–ü–µ—Ä–µ–≤–æ–¥: {word_row['Translation']}_")

        col1, col2, col3 = st.columns(3)
        if col1.button("‚¨ÜÔ∏è –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"):
            df.loc[(df["Word"] == word_row["Word"]) & (df["Translation"] == word_row["Translation"]), "Level"] += 1
            df.loc[(df["Word"] == word_row["Word"]) & (df["Translation"] == word_row["Translation"]), "Last_Review"] = datetime.datetime.now()
            save_data(category, df)
            st.rerun()

        if col2.button("‚û°Ô∏è –û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å"):
            df.loc[(df["Word"] == word_row["Word"]) & (df["Translation"] == word_row["Translation"]), "Last_Review"] = datetime.datetime.now()
            save_data(category, df)
            st.rerun()

        if col3.button("‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"):
            idx = (df["Word"] == word_row["Word"]) & (df["Translation"] == word_row["Translation"])
            df.loc[idx, "Level"] = df.loc[idx, "Level"].apply(lambda x: max(x - 1, 0))
            df.loc[idx, "Last_Review"] = datetime.datetime.now()
            save_data(category, df)
            st.rerun()

elif menu == "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤–∞—Ä—è":
    st.subheader("üìñ –°–ª–æ–≤–∞—Ä—å")

    search_term = st.text_input("–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥—É")
    sort_option = st.selectbox("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ", ["Word", "Translation", "Level", "Last_Review"])
    filtered_df = df[df.apply(lambda row: search_term.lower() in str(row["Word"]).lower() or search_term.lower() in str(row["Translation"]).lower(), axis=1)] if search_term else df
    df_sorted = filtered_df.sort_values(by=sort_option).reset_index(drop=True)

    page_size = 30
    total_pages = (len(df_sorted) - 1) // page_size + 1
    page = st.number_input("–°—Ç—Ä–∞–Ω–∏—Ü–∞", min_value=1, max_value=total_pages, value=1, step=1)
    start_idx = (page - 1) * page_size
    end_idx = start_idx + page_size
    page_df = df_sorted.iloc[start_idx:end_idx]

    selected_rows = []
    for i, row in page_df.iterrows():
        col1, col2 = st.columns([0.05, 0.95])
        with col1:
            selected = st.checkbox("", key=f"sel_{start_idx + i}")
        with col2:
            st.markdown(f"**{row['Word']}** ‚Äî _{row['Translation']}_")
        if selected:
            selected_rows.append(start_idx + i)

    if len(selected_rows) == 1:
        i = selected_rows[0]
        st.markdown("---")
        st.markdown("**–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ**")
        new_word = st.text_input("–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ", value=df.loc[i, "Word"], key="edit_word")
        new_translation = st.text_input("–ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥", value=df.loc[i, "Translation"], key="edit_translation")
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            df.at[i, "Word"] = new_word
            df.at[i, "Translation"] = new_translation
            save_data(category, df)
            st.success("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    if selected_rows:
        if st.button("üóë –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ"):
            if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"):
                df = df.drop(index=selected_rows).reset_index(drop=True)
                save_data(category, df)
                st.success("–ó–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã")

    st.markdown("---")
    st.dataframe(page_df.reset_index(drop=True))
